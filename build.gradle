buildscript {

    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion")
        guava_version = constants.getProperty("guavaVersion")
        tokens_release_group = 'com.r3.corda.lib.tokens'
        tokens_release_version = '1.2'

        confidential_id_release_group = "com.r3.corda.lib.ci"
        confidential_id_release_version = "1.0"


        //springboot
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
    }

    dependencies {
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {
    apply plugin: 'java'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
        // Can be removed post-release - used to get nightly snapshot build.
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-tokens-dev' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

    dependencies {
        compile "com.google.guava:guava:$guava_version"
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
    
}


apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    info {
        name "CorDapp tokenizedCurrency"
        vendor "Corda Open Source"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion corda_platform_version.toInteger()
    }
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    testCompile "junit:junit:$junit_version"
    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")
    
    // For logging
    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

    // Token SDK dependencies.
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"

    cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"


}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp("$tokens_release_group:tokens-contracts:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-workflows:$tokens_release_version")
        cordapp("$confidential_id_release_group:ci-workflows:$confidential_id_release_version")
        cordapp project(':contracts')
        cordapp project(':workflows')
        cordapp project(":workflowKotlin")
    }
    node {
        name "O=Notary1,L=Guangzhou,C=CN"
        notary = [validating : false]
        p2pPort 10003
        rpcSettings {
            address("localhost:10004")
            adminAddress("localhost:10043")
        }
        cordapps = []
    }
    node {
        name "O=Notary2,L=Guangzhou,C=CN"
        notary = [validating : false]
        p2pPort 10016
        rpcSettings {
            address("localhost:10017")
            adminAddress("localhost:10018")
        }
        cordapps = []
    }
    node {
        name "O=Bank,L=Guangzhou,C=CN"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Canteen,L=Guangzhou,C=CN"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
//    node {
//        name "O=ATM,L=Guangzhou,C=CN"
//        p2pPort 10019
//        rpcSettings {
//            address("localhost:10009")
//            adminAddress("localhost:10049")
//        }
//        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
//    }
    node {
        name "O=CustomerA,L=Guangzhou,C=CN"
        p2pPort 10012
        rpcSettings {
            address("localhost:10013")
            adminAddress("localhost:10014")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}

task deployNodesPro(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp("$tokens_release_group:tokens-contracts:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-workflows:$tokens_release_version")
        cordapp("$confidential_id_release_group:ci-workflows:$confidential_id_release_version")
        cordapp project(':contracts')
        cordapp project(':workflows')
    }
    node {
        name "O=Notary1,L=Guangzhou,C=CN"
        notary = [validating : false]
        p2pAddress "161.189.108.227:10051"
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        cordapps = []
    }
    node {
        name "O=Notary2,L=Guangzhou,C=CN"
        notary = [validating : false]
        p2pAddress "161.189.108.227:10052"
        rpcSettings {
            address("localhost:10017")
            adminAddress("localhost:10018")
        }
        cordapps = []
    }

//    node {
//        name "O=ATM,L=Guangzhou,C=CN"
//        p2pAddress "161.189.113.238:10051"
//        rpcSettings {
//            address("localhost:10006")
//            adminAddress("localhost:10043")
//        }
//        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
//    }
    
    node {
        name "O=Bank,L=Guangzhou,C=CN"
        p2pAddress "161.189.108.227:10053"
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Canteen,L=Guangzhou,C=CN"
        p2pAddress "161.189.113.238:10054"
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10059")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=CustomerA,L=Guangzhou,C=CN"
        p2pAddress "52.82.42.149:10055"
        rpcSettings {
            address("localhost:10013")
            adminAddress("localhost:10069")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}


task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}
